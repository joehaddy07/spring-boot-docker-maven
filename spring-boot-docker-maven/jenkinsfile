pipeline {
    agent {
        label 'maven-host'
    }
    parameters {
        string(name: 'BUILD_RETENTION_DAYS', defaultValue: '7', description: 'Days to keep builds')
        string(name: 'ARTIFACT_RETENTION_DAYS', defaultValue: '2', description: 'Days to keep artifacts')
    }
    options {
        buildDiscarder(logRotator(daysToKeepStr: "${params.BUILD_RETENTION_DAYS}", artifactDaysToKeepStr: "${params.ARTIFACT_RETENTION_DAYS}"))
        quietPeriod(20)
        timestamps()
    }
    tools {
        maven 'MavenTool'  // Ensure this is configured in Jenkins
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'  // SonarQube scanner tool configured in Jenkins
        DOCKERFILE = 'spring-boot-docker-maven/Dockerfile'  // Set the path to the Dockerfile
        IMAGE_NAME = 'joehaddy/springbootdemo'  // Docker image name
        IMAGE_TAG = 'v1'  // Version tag
        DOCKER_HUB_REPO = 'https://hub.docker.com'  // Docker Hub repository
        
    }
    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/joehaddy07/spring-boot-docker-maven.git']]
                ])
            }
        }
        stage('Build with Maven') {
            steps {
                script {
                    dir('spring-boot-docker-maven') {  // Adjust path to where pom.xml is located
                        sh 'mvn clean install'
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonar-server') {  // Use the SonarQube server installation name
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=SpringBootAppsDevOps \
                       -Dsonar.java.binaries=.
                    '''
                }
            }
        }
        stage('Check Dockerfile') {
            steps {
                script {
                    if (fileExists(env.DOCKERFILE)) {
                        echo "Dockerfile exists at: ${env.DOCKERFILE}"
                    } else {
                        error "Dockerfile does not exist at: ${env.DOCKERFILE}"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f ${DOCKERFILE} spring-boot-docker-maven/"
                }
            }
        }
        
        stage('Trivy Scan') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'github-token', 
                                           passwordVariable: 'GITHUB_TOKEN', 
                                           usernameVariable: 'GITHUB_USER')]) {
                // Set up authentication
                sh """
                    export GITHUB_TOKEN=${GITHUB_TOKEN}
                    trivy image \
                    --exit-code 1 \
                    --severity HIGH,CRITICAL \
                    ${IMAGE_NAME}:${IMAGE_TAG}
                """
            }
        }
    }
}

        stage('Push Docker Image To Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'Docker-Hub', 
                    passwordVariable: 'DockerPassWord', 
                    usernameVariable: 'DockerUserName')]) {
                        sh 'echo $DockerPassWord | docker login -u $DockerUserName --password-stdin'
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                        sh 'docker logout'
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
        always {
            cleanWs()
        }
    }
}
